/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class BSTIterator {
    
    TreeNode ptr;
    ArrayList<Integer> BSTList;
    int countOfNext;
    
    public BSTIterator(TreeNode root) {
        ptr = root;
        BSTList = new ArrayList<>();
        countOfNext = 0;
        
        // call the inorderT to create an inorder List
        inorderT(ptr);
    }
    
    public int next() {
        return BSTList.get(countOfNext++);
    }
    
    public boolean hasNext() {
        return countOfNext < BSTList.size();
    }
    
    private void inorderT(TreeNode refPtr) {
        if (refPtr == null) return;
       
        inorderT(refPtr.left);
        BSTList.add(refPtr.val); 
        inorderT(refPtr.right);
    }
}

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator obj = new BSTIterator(root);
 * int param_1 = obj.next();
 * boolean param_2 = obj.hasNext();
 */